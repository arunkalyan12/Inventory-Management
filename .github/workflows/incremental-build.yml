name: CI/CD Incremental Build

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:

  # ------------------------------
  # 1. Lint & Pre-commit
  # ------------------------------
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit on all files
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files

  # ------------------------------
  # 2. Detect Changed Services
  # ------------------------------
  detect:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      matrix: ${{ steps.filter.outputs.matrix }}
      has_changes: ${{ steps.filter.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            computer_vision:
              - 'components/computer_vision/**'
            inventory_management:
              - 'components/inventory_management/**'
            notification_service:
              - 'components/notification_service/**'
            monitoring_tracing:
              - 'components/monitoring_tracing/**'
            shared_utils:
              - 'components/shared_utils/**'

  # ------------------------------
  # 3. Build, Test & Push Docker images
  # ------------------------------
  build-test:
    name: Build, Test & Push
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.any_changed == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate shared logger
        run: |
          LOGGER_PATH="components/shared_utils/logging/logger.py"
          if [ ! -f "$LOGGER_PATH" ]; then
            echo "ERROR: $LOGGER_PATH not found!"
            exit 1
          fi

          LOG_FORMAT=$(grep -E "formatter\s*=" "$LOGGER_PATH" || true)
          if [ -z "$LOG_FORMAT" ]; then
            echo "ERROR: No logging formatter found in logger.py"
            exit 1
          fi
          echo "âœ… Logging setup found and format defined."

      - name: Install service dependencies
        run: |
          cd components/${{ matrix.service }}
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          cd components/${{ matrix.service }}
          if [ -d "tests" ]; then
            pytest -q --disable-warnings
          else
            echo "No tests found for ${{ matrix.service }}, skipping."
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image to GHCR
        run: |
          docker build -t ${{ matrix.service }}:dev components/${{ matrix.service }}
          docker tag ${{ matrix.service }}:dev ghcr.io/${{ github.repository_owner }}/inventory-management/${{ matrix.service }}:latest
          docker push ghcr.io/${{ github.repository_owner }}/inventory-management/${{ matrix.service }}:latest

  # ------------------------------
  # 4. Deploy to Kind Cluster
  # ------------------------------
  deploy:
    name: Deploy to Kind
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' && needs.detect.outputs.any_changed == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Kind cluster
        run: |
          kind create cluster --name inventory-cluster || echo "Cluster already exists"

      - name: Apply deployment YAML
        run: |
          kubectl apply -f deployments/${{ matrix.service }}.yml

      - name: Wait for pod readiness
        run: |
          kubectl wait --for=condition=ready pod -l app=${{ matrix.service }} --timeout=60s
